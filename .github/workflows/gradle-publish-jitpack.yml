name: Publish to JitPack on Release

on:
  release:
    types: [published] # 只在发布正式Release时触发

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read # 必须的基础权限

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # JitPack需要完整的git历史记录

      - name: Verify Release Tag
        run: |
          # 严格校验Tag格式（支持v前缀和纯数字版本）
          if [[ ! "${{ github.event.release.tag_name }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Must be like 1.0.0 or v1.0.0"
            exit 1
          fi

      - name: Trigger JitPack Build
        env:
          JITPACK_TOKEN: ${{ secrets.JITPACK_TOKEN }} # GitHub PAT with repo scope
        run: |
          # 保留原始Tag格式（不修改v前缀）
          VERSION=${{ github.event.release.tag_name }}
          OWNER=${{ github.repository_owner }}
          REPO=${{ github.event.repository.name }}

          echo "Triggering build for: com.github.$OWNER/$REPO@$VERSION"

          # JitPack官方GET API
          API_URL="https://jitpack.io/api/builds/com.github.$OWNER/$REPO/$VERSION"

          # 带认证的GET请求
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
            -H "Authorization: Bearer $JITPACK_TOKEN" \
            "$API_URL")

          # 提取HTTP状态码和响应体
          HTTP_STATUS=$(echo "$RESPONSE" | grep HTTP_STATUS: | cut -d':' -f2)
          BODY=$(echo "$RESPONSE" | sed '/HTTP_STATUS:/d')

          echo "API Response: $BODY"
          echo "HTTP Status: $HTTP_STATUS"

          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "::error::JitPack API failed with status $HTTP_STATUS"
            exit 1
          fi

      - name: Monitor Build Status
        run: |
          VERSION=${{ github.event.release.tag_name }}
          echo "Monitor build progress at:"
          echo "https://jitpack.io/#${{ github.repository }}/$VERSION"
          echo "Note: Building may take 3-5 minutes"
